import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const screensDir = path.join(__dirname, "src", "screens");
const outputFile = path.join(__dirname, "src", "componentMapping.ts");

function walkDir(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    if (stat.isDirectory()) {
      walkDir(filePath, fileList);
    } else if (file.endsWith(".svelte")) {
      const relativePath = path
        .relative(screensDir, filePath)
        .replace(/\\/g, "/")
        .replace(/\.svelte$/, "");
      fileList.push(relativePath);
    }
  });
  return fileList;
}

function processArray(arr) {
  // Define the values to check for removal
  const valuesToRemove = ["_", "index", "_index", "__index"];

  // Check if the last element matches any of the values to remove
  if (valuesToRemove.includes(arr[arr.length - 1])) {
    arr.pop(); // Remove the last element
  }

  // Replace elements starting with [ or *
  const processedArr = arr.map((element) => {
    if (element.startsWith("[") || element.startsWith("*")) {
      return "*";
    }
    return element;
  });

  return processedArr;
}

const components = walkDir(screensDir);

const mappingContent = `
import additionalRoutes from "./additionalRoutes.js";
  // generated by generate-tree.js
  export const componentMapping = {
    ${components
      .map(
        (component) =>
          `'${component}': () => import('./screens/${component}.svelte')`
      )
      .join(",\n")},
    ...additionalRoutes
  };


  export type Route = ${components
    .map((component) => JSON.stringify(processArray(component.split("/"))))
    .reduce((acc, curr) => {
      return acc + "|" + curr;
    }, "")
    .slice(1)
    .replaceAll('"string"', "string")}

    // Convert tuple types to string types
 export   type RouteToString<T> = T extends [] ? "" : T extends [infer U, ...infer Rest] ? \`\${ U & string}/\${RouteToString<Rest>}\` : never;
 

export type RouteStrings = RouteToString<Route>;



`;

fs.writeFileSync(outputFile, mappingContent.trim());

console.log(`Component mapping generated at ${outputFile} `);
